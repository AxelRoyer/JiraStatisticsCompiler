require("taghub-testdom")("<html>" +
    "<body></body>" +
"</html>");
var assert          = require("assert"),
    React           = require("react"),
    ReactAddons     = require("react/addons"),
    TaghubInput     = require("../taghubInput"),
    mock            = require("./mock"),
    _               = require("lodash"),
    $               = require("jquery"),
    ReactTestUtils  = React.addons.TestUtils;

describe("Tag-Hub input", function() {
    var _taghubInput,
        _defaultProps = {
            id  : "Whatever"
        };

    function render(
        newProps,
        callback
        ) {
        var props   = _.merge(_defaultProps, newProps);

        _taghubInput    = React.renderComponent(
            TaghubInput(props),
            document.body,
            function() {
                if (typeof callback === "function") callback(this)
            }
        )
    }
    before(function(done) {
        render(
            {},
            function() {
                done()
            }
        )
    });
    it(
        "Should render a li-element",
        function(done) {
            var element = document.querySelectorAll("li");

            assert(element.length == 1);
            done()
        }
    );
    it(
        "Should render an input-element or select-element inside the li-element",
        function(done) {
            var element     = document.querySelectorAll("li")[0].querySelectorAll("input"),
                _element    = document.querySelectorAll("li")[0].querySelectorAll("select");

            assert(element.length == 1 || _element.length == 1);
            done()
        }
    );
    it(
        "Should render a label-element inside the li-element",
        function(done) {
            var element = document.querySelectorAll("li")[0].querySelectorAll("label");

            assert(element.length == 1);
            done()
        }
    );
    it(
        "Should render according to the passed values",
        function(done) {
            mock.fields.map(function(field) {
                render(
                    {
                        id          : field.id,
                        type        : field.type,
                        className   : field.className,
                        placeholder : field.placeholder,
                        value       : field.value,
                        maxLength   : field.maxLength,
                        labelText   : field.labelText
                    },
                    function() {
                        var element     = document.querySelectorAll("input")[0],
                            _element    = document.querySelectorAll("label")[0];

                        // TODO: A way of testing for value
                        assert(element.getAttribute("id") == field.id);
                        assert(element.placeholder == field.placeholder);
                        assert(element.getAttribute("maxlength") == field.maxLength);
                        if (field.type !== "date") {
                            assert(element.getAttribute("type") == field.type);
                            assert(element.getAttribute("class") == field.className);
                        } else {
                            assert(element.getAttribute("class") == field.className+" hasDatepicker");
                        }
                        assert(_element.innerHTML == field.labelText);
                        assert(_element.getAttribute("for") == field.id);
                    }
                )
            });
            done()
        }
    );
    it(
        "Should display calendar widget if date input-element is focused",
        function(done) {
            render(
                {
                    type    : "date"
                },
                function(resp) {
                    var element = ReactTestUtils.scryRenderedDOMComponentsWithTag(resp, "input")[0];

                    ReactTestUtils.Simulate.focus(element);
                    assert(document.querySelectorAll("#ui-datepicker-div").length == 1);
                    done()
                }
            )
        }
    );
    it(
        "Should display select widget if select-element is focused",
        function(done) {
            render(
                {
                    type    : "select"
                },
                function(resp) {
                    var element = ReactTestUtils.scryRenderedDOMComponentsWithTag(resp, "input")[0];

                    ReactTestUtils.Simulate.focus(element);
                    assert(document.querySelectorAll("#efrefef").length == 1);
                    done()
                }
            )
        }
    );
});